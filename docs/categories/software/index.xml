<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Call me Guido</title>
    <link>http://guidogarcia.net/blog/categories/software/</link>
    <description>Recent content in Software on Call me Guido</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2015 19:13:07 +0000</lastBuildDate>
    
	<atom:link href="http://guidogarcia.net/blog/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible. Automate everything.</title>
      <link>http://guidogarcia.net/blog/blog/2015/10/18/ansible-automate-everything/</link>
      <pubDate>Sun, 18 Oct 2015 19:13:07 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2015/10/18/ansible-automate-everything/</guid>
      <description>Ansible is an automation tool that works by running tasks (a playbook) against a set of hosts (inventory).
The first beta of Ansible 2.x is ready, and it comes with modules to automate the management of your openstack infrastructure (other cloud platforms are also available). This is my presentantion for begginers who want to start using Ansible and to stop wasting their time.</description>
    </item>
    
    <item>
      <title>Simple moving average with bacon.js</title>
      <link>http://guidogarcia.net/blog/blog/2015/01/15/moving-average-with-baconjs/</link>
      <pubDate>Thu, 15 Jan 2015 08:22:35 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2015/01/15/moving-average-with-baconjs/</guid>
      <description>Bacon is a small functional reactive programming lib for JavaScript. Sometimes it is easier to handle data as a stream and react to changes in the stream instead of processing individual events. In the example below (nodejs), a simple moving average.
var Bacon = require(&#39;baconjs&#39;) function avg(array) { var sum = array.reduce(function(a, b) { return a + b; }, 0); return sum / array.length; } var bus = new Bacon.Bus(); bus.</description>
    </item>
    
    <item>
      <title>Evolutionary computation · TEFcon 2014</title>
      <link>http://guidogarcia.net/blog/blog/2014/11/05/evolutionary-computation-%c2%b7-tefcon-2014/</link>
      <pubDate>Wed, 05 Nov 2014 08:13:34 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/11/05/evolutionary-computation-%c2%b7-tefcon-2014/</guid>
      <description>This is my presentation (spanish) about evolutionary computation for the TEFcon 2014. It was a talk about how we code and how genetic algorithms and genetic programming might help us. Because &amp;ldquo;programming should be more about the what and less about the how&amp;rdquo;.
Edit: I&amp;rsquo;ve pushed the Java code for the queens problem using genetic algorithms to github.</description>
    </item>
    
    <item>
      <title>Lazy loading of modules in nodejs</title>
      <link>http://guidogarcia.net/blog/blog/2014/03/27/lazy-loading-modules-nodejs/</link>
      <pubDate>Thu, 27 Mar 2014 16:43:59 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/03/27/lazy-loading-modules-nodejs/</guid>
      <description>This is a pattern I found in pkgcloud to lazy-load nodejs modules. That is, to defer their loading until a module is actually needed.
var providers = [ &#39;amazon&#39;, &#39;azure&#39;, ..., &#39;joyent&#39; ]; ... // // Setup all providers as lazy-loaded getters // providers.forEach(function (provider) { pkgcloud.providers.__defineGetter__(provider, function () { return require(&#39;./pkgcloud/&#39; + provider); }); });  It basically defines a getter, so modules won&amp;rsquo;t be loaded until you do:</description>
    </item>
    
    <item>
      <title>Performance is premature optimization</title>
      <link>http://guidogarcia.net/blog/blog/2014/01/18/performance-is-premature-optimization/</link>
      <pubDate>Sat, 18 Jan 2014 19:06:03 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/01/18/performance-is-premature-optimization/</guid>
      <description>I will burn in hell, but performance is premature optimization nowadays. Despite it is very interesting from an engineering perspective, from the practical point of view of someone who wants to follow the make-shit-happen startup mantra, my advice is not to worry much about it when it comes to choosing a programming language.
There are things that matter more than the technology stack you choose. In this post I will try to explain why; then you can vent your rage in the comments section.</description>
    </item>
    
    <item>
      <title>Function parameters in Python, Java and Javascript</title>
      <link>http://guidogarcia.net/blog/blog/2014/01/18/function-parameters-python-java-javascript/</link>
      <pubDate>Sat, 18 Jan 2014 11:31:44 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/01/18/function-parameters-python-java-javascript/</guid>
      <description>This is a short post about how these programming languages compare with each other when it comes to declaring functions with optional parameters and default values. Feel free to leave alternatives in other languages in the comments.
Python. The good. Python is my favorite. Use your parameters in any order and define their default values as part of the function signature itself.
def foo(arg1, arg2=&amp;quot;default&amp;quot;): print &amp;quot;arg1:&amp;quot;, arg1, &amp;quot;arg2:&amp;quot;, arg2  The price to pay is that you can not define two methods with the same name in the same class.</description>
    </item>
    
    <item>
      <title>Give your configuration some REST</title>
      <link>http://guidogarcia.net/blog/blog/2014/01/02/a-rest-configuration-server/</link>
      <pubDate>Thu, 02 Jan 2014 14:00:00 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/01/02/a-rest-configuration-server/</guid>
      <description>I have built a simple configuration server to expose your app&amp;rsquo;s configuration as a REST service. Its name is rest-confidence (github). In this post I will try to explain its basics and three use cases where it could be useful:
 1. To configure distributed services. 2. As a foundation for A/B testing. 3. As a simple service directory.  Install and run a basic rest-confidence configuration server The first step is installing the configuration server:</description>
    </item>
    
    <item>
      <title>Why is node.js so cool? (from a Java guy)</title>
      <link>http://guidogarcia.net/blog/blog/2013/12/09/why-is-nodejs-so-cool-from-a-java-guy/</link>
      <pubDate>Mon, 09 Dec 2013 14:43:51 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2013/12/09/why-is-nodejs-so-cool-from-a-java-guy/</guid>
      <description>I confess: I am a Java guy At least I used to be. Until I meet node.js. I still think the JVM is one of the greatest pieces of technology ever created by man, and I love the Spring Framework, the hundreds of Apache Java libraries or the over-six-hundred-page books about JEE patterns. It is great for big applications that are created by many developers, or applications that are made to last.</description>
    </item>
    
    <item>
      <title>Big teams are not agile in the digital world</title>
      <link>http://guidogarcia.net/blog/blog/2013/08/12/big-teams-are-not-agile-in-the-digital-world/</link>
      <pubDate>Mon, 12 Aug 2013 14:11:54 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2013/08/12/big-teams-are-not-agile-in-the-digital-world/</guid>
      <description>The post today is not so technical. I have been thinking about why many big corporations, with almost unlimited resources, are not able to deliver top quality products and services. Why companies with a small fraction of resources create new products faster?
I have found several sociopsychological causes, most of them related with an aspect of human activity: working in a team.
Diffusion of responsibility Diffusion of responsibility is a sociopsychological phenomenon whereby a person is less likely to take responsibility for action or inaction when others are present.</description>
    </item>
    
    <item>
      <title>Playing around with Meteor</title>
      <link>http://guidogarcia.net/blog/blog/2013/03/01/playing-with-meteor-framewor/</link>
      <pubDate>Thu, 28 Feb 2013 23:38:42 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2013/03/01/playing-with-meteor-framewor/</guid>
      <description>I have been playing around with meteor, an open-source platform for building web apps. The result is a 200 LOC game ladder with a live demo.
The platform is built on top of nodejs, what is great. In my opinion, it is not yet ready for production environments, but I am really impressed with how fast you can create simple web applications with live page updates, automatic data synchronization and many other niceties I have never seen before in any other web framework.</description>
    </item>
    
    <item>
      <title>Deploy virtual machines on Instant Servers cloud with Java</title>
      <link>http://guidogarcia.net/blog/blog/2013/02/17/deploy-virtual-machines-on-instant-servers-cloud-with-java/</link>
      <pubDate>Sun, 17 Feb 2013 20:23:26 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2013/02/17/deploy-virtual-machines-on-instant-servers-cloud-with-java/</guid>
      <description>Instant Servers is the infrastructure as a service (IaaS) system I have been working on during the last months in Telefónica Digital.
The service offers a public REST API (Cloud API) that is super simple to use. However, in this post I will show you how to manage your infrastructure using a Java client, without dealing with HTTP requests.
Build the Cloud API client Man does not live by nodejs alone.</description>
    </item>
    
    <item>
      <title>Node.js running on my Raspberry Pi. A benchmark.</title>
      <link>http://guidogarcia.net/blog/blog/2012/09/13/node-js-on-my-raspberry-pi-a-benchmark/</link>
      <pubDate>Thu, 13 Sep 2012 19:24:58 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/09/13/node-js-on-my-raspberry-pi-a-benchmark/</guid>
      <description>Few weeks ago I could not resist the temptation to buy a Raspberry Pi, the super-cheap 35$ computer that comes with 256MB of RAM and a ARM CPU running at 700MHz and fits in your pocket (more information in wikipedia).
See how nice it looks. I am more of a software guy, so the first thing I did was to install node.js (v0.6.19) develop the simplest web server you can create in node (5 lines, it simply returns a 200 HTTP response code without any contents) and put the beast to work.</description>
    </item>
    
    <item>
      <title>Analysis of variance (ANOVA) applied to fraud detection</title>
      <link>http://guidogarcia.net/blog/blog/2012/08/26/analysis-of-variance-anova-applied-to-fraud-detection/</link>
      <pubDate>Sun, 26 Aug 2012 17:42:41 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/08/26/analysis-of-variance-anova-applied-to-fraud-detection/</guid>
      <description>Fraud detection is a topic applicable to many sectors (financial, insurance, etc). The method explained in this post is applied in the market research field by Gather Precision (a great market research tool developed by Gather Estudios, BTW), as an early signal to detect frauds in opinion polls.
Imagine you have four field workers (Peter, John, Mary, Ann) taking surveys on the street. They spend different times gathering the data, and we want to discover if there are significant differences on the average levels.</description>
    </item>
    
    <item>
      <title>My experience in the 2nd Tuenti Programming Challenge</title>
      <link>http://guidogarcia.net/blog/blog/2012/05/06/my-experience-in-tuenti-programming-challenge/</link>
      <pubDate>Sun, 06 May 2012 18:29:45 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/05/06/my-experience-in-tuenti-programming-challenge/</guid>
      <description>This week I have been participating in the 2nd edition of the Tuenti Programming Challenge. I felt a little rusty on my return to top-level competition, but despite I started the competition three days late, I was able to reach level 14 (stats). Not so bad.
The problems I prefer are those with an obvious brute force solution, but that can take advantage of a particular algorithm or data structure.</description>
    </item>
    
    <item>
      <title>How to develop a Java REST client in 3 minutes</title>
      <link>http://guidogarcia.net/blog/blog/2012/03/02/how-to-develop-java-rest-client/</link>
      <pubDate>Fri, 02 Mar 2012 20:10:07 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/03/02/how-to-develop-java-rest-client/</guid>
      <description>Some time ago I wrote a post about how to implement a REST API with Java (spanish). Today I am going to write about how to consume a REST API as a client. More specifically, I am going to use Digg API (probably not the best REST API out there) to search stories by a given keyword.
Show me the code As it is a third party REST API, I am going to use the client framework provided by RESTEasy, that I find extremely easy to use.</description>
    </item>
    
    <item>
      <title>Auditing JPA entities with Hibernate Envers</title>
      <link>http://guidogarcia.net/blog/blog/2012/01/25/auditing-jpa-entities-with-hibernate-envers/</link>
      <pubDate>Tue, 24 Jan 2012 23:06:26 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/01/25/auditing-jpa-entities-with-hibernate-envers/</guid>
      <description>In a recent project we had the need to keep a record of the changes made in every domain entity. That is, we need to insert a new record on an audit table every time an entity is created/updated/deleted.
This is not the first time this problem arises. I think this is a the case of a cross-cutting concern, that fits well into the aspect-oriented programming area. I have seen this very same problem in many different projects I have worked on, always solved with one variant of these two approches:</description>
    </item>
    
    <item>
      <title>Graph your Twitter network with Gephi</title>
      <link>http://guidogarcia.net/blog/blog/2012/01/21/graph-yourtwitter-network-with-gephi/</link>
      <pubDate>Sat, 21 Jan 2012 09:37:14 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/01/21/graph-yourtwitter-network-with-gephi/</guid>
      <description>Gephi is a really cool open-source (GPL) project for visualizing and analyzing network graphs.
Getting started If you want to start using Gephi you have two choices:
 * The blue pill, a simple **GUI**, pretty easy to use, that offers many network metrics, statistical algorithms (clustering, etc) to analyze your own graphs. The story ends. * The red pill, the **[Gephi Toolkit](http://wiki.gephi.org/index.php/Toolkit_portal)**. The toolkit is a standard Java library that can be integrated with your own code if you need to analyze graphs.</description>
    </item>
    
    <item>
      <title>ACRA, reporting crashes in your Android app the easy way</title>
      <link>http://guidogarcia.net/blog/blog/2011/12/20/acra-reporting-crashes-in-your-android-application-the-easy-way/</link>
      <pubDate>Tue, 20 Dec 2011 20:02:30 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/12/20/acra-reporting-crashes-in-your-android-application-the-easy-way/</guid>
      <description>ACRA (Application Crash Report for Android) is a extremely helpful Android library that allows your mobile application to send a report to different destinations when it crashes -miserably-.
It is both powerful/configurable and very easy to use at the same time, allowing:
 * Different kind of notifications (silent, toast, status bar, etc) * Detailed crash reports (stack traces, device model, system versions) * Many targets (email, shared google spreadsheet, etc)  In my example I have used a shared google document as the target where the notifications are sent, and I have chosen not to show anything to de user when the application crashes (silent mode).</description>
    </item>
    
    <item>
      <title>Getting started with Spring Roo</title>
      <link>http://guidogarcia.net/blog/blog/2011/12/05/getting-started-with-spring-roo/</link>
      <pubDate>Mon, 05 Dec 2011 14:52:22 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/12/05/getting-started-with-spring-roo/</guid>
      <description>For those who are not familiar with it, Spring Roo is an open source tool that provides rapid application development of Java applications, using standard Java technologies underneath.
Last week I gave a presentation (slides) about how to start using Spring Roo to some co-workers in Telefónica Digital. I have recorded a video with captions for those who couldn&amp;rsquo;t attend (use fullscreen mode and 720p).
The video does not cover some interesting aspects about Spring such as Spring Data (I will write a post about it), or how to completely remove Spring Roo from your project (right button &amp;gt; Refactor &amp;gt; Push In and that is all).</description>
    </item>
    
    <item>
      <title>Scripting for the Java platform</title>
      <link>http://guidogarcia.net/blog/blog/2011/11/03/scripting-for-the-java-platform/</link>
      <pubDate>Thu, 03 Nov 2011 07:44:57 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/11/03/scripting-for-the-java-platform/</guid>
      <description>Despite many developers do not know it, since Java SE 6 it is really easy to integrate Java and some scripting languages through a standard Java Scripting API (JSR-223 implementation)
Currently, both AppleScript (2.2.1) and ECMAScript (1.6) script engines are supported by default, at least on my machine. In the following example I invoke a Javascript function from Java, using Mozilla Rhino, the JavaScript implementation that ships with Java SE 6:</description>
    </item>
    
    <item>
      <title>Java : different ways to filter a Collection</title>
      <link>http://guidogarcia.net/blog/blog/2011/10/29/java-different-ways-filter-collection/</link>
      <pubDate>Sat, 29 Oct 2011 13:37:43 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/10/29/java-different-ways-filter-collection/</guid>
      <description>Imagine we have a simple Java class:
 public class Person { private int age; private Gender sex; // constructor, getters &amp;amp; setters } enum Gender { MALE, FEMALE };  And that you have a Collection of Person objects, such as the following one:
 Person p1 = new Person(35, Gender.MALE); Person p2 = new Person(30, Gender.MALE); Person p3 = new Person(25, Gender.FEMALE); Person p4 = new Person(15, Gender.</description>
    </item>
    
    <item>
      <title>My first Javascript robotics simulator (and II)</title>
      <link>http://guidogarcia.net/blog/blog/2011/09/18/first-javascript-simulator-ii/</link>
      <pubDate>Sun, 18 Sep 2011 17:03:47 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/09/18/first-javascript-simulator-ii/</guid>
      <description>A week ago I wrote a post about a Javascript robotics simulator. As an experimental project, I took the opportunity to try different technologies: HTML5, Javascript and Git. In this post I am going to write about what I have learnt with this project from a technical point of view, and what the future lines of work could be.
HTML5 I learnt how the new slider input works, and how to use a canvas to display graphical information into a web browser.</description>
    </item>
    
    <item>
      <title>My first Javascript robotics simulator (I)</title>
      <link>http://guidogarcia.net/blog/blog/2011/09/13/first-javascript-robotics-simulator/</link>
      <pubDate>Mon, 12 Sep 2011 23:02:22 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/09/13/first-javascript-robotics-simulator/</guid>
      <description>I must admit I have always been fascinated about robotics, especially about how a swarm of robots can cooperate, following a set of simple rules that lead to complex emergent behaviours, like those you can see in the exciting motion of a flock of birds.
Whereas I have some elctronics background, the bad news is that I am a software developer at heart. This is why I find a big obstacle when it comes to the hardware layer.</description>
    </item>
    
    <item>
      <title>To ORM or not to ORM</title>
      <link>http://guidogarcia.net/blog/blog/2011/08/28/to-orm-or-not-to-orm/</link>
      <pubDate>Sun, 28 Aug 2011 18:01:35 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/08/28/to-orm-or-not-to-orm/</guid>
      <description>In the last days I have had a couple of interesting discussions about wether to include an ORM library (such as Hibernate JPA implementation) in an application is a good idea or not.
In this case, as usual, I think there is not a single best choice for every scenario, so I&amp;rsquo;ll try to list pros (and cons) for each alternative.
Use an ORM layer  * Easy to develop and maintain.</description>
    </item>
    
    <item>
      <title>BigDecimal : detalles que hacen que Java de asco</title>
      <link>http://guidogarcia.net/blog/blog/2011/08/15/bigdecimal-detalle-que-hacen-que-java-de-asco/</link>
      <pubDate>Mon, 15 Aug 2011 18:31:34 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/08/15/bigdecimal-detalle-que-hacen-que-java-de-asco/</guid>
      <description>Sirva como ejemplo el siguiente fragmento de código, en el que se utiliza la clase BigDecimal que ofrece Java para trabajar con precisión arbitraria en operaciones con números en coma flotante:
BigDecimal num = new BigDecimal(2); num = num.add(new BigDecimal(3.2)); System.out.println(num.toString()); System.out.println(num.doubleValue());  Para empezar, esta es la salida del programa, que no necesita comentarios:
5.20000000000000017763568394002504646778106689453125 5.2  En Java, salvo el caso del operador &amp;ldquo;+&amp;rdquo; para la concatenación de cadenas, tampoco existe sobrecarga de operadores, por lo que una simple operación como sumar dos números se realiza de forma poco natural:</description>
    </item>
    
    <item>
      <title>Cómo implementar un API REST en Java/JEE</title>
      <link>http://guidogarcia.net/blog/blog/2011/07/31/como-implementar-un-api-rest-en-java-jee/</link>
      <pubDate>Sun, 31 Jul 2011 22:42:53 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2011/07/31/como-implementar-un-api-rest-en-java-jee/</guid>
      <description>Me pidieron consejo hace unos días sobre este tema. Personalmente, a día de hoy sólo recomiendo estas opciones, muy parecidas y que se basan en anotar las clases Java:
 * El especificación **[JAX-RS](http://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services)**, incluida de serie en Java EE 6. Hay varias implementaciones, entre otras [Jersey](http://jersey.java.net/), [Restlet](http://www.restlet.org/) o [Resteasy]( http://www.jboss.org/resteasy). Esta última es la que utiliza JBoss y que he utilizado sin problemas también con JBoss 5.1. @Path(&amp;quot;/product/{id}&amp;quot;) public class ProductResource { @GET public String get(@PathParam(&amp;quot;id&amp;quot;) String id) { return .</description>
    </item>
    
  </channel>
</rss>