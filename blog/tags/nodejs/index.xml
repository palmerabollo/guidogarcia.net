<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Call me Guido</title>
    <link>http://guidogarcia.net/blog/tags/nodejs/</link>
    <description>Recent content in Nodejs on Call me Guido</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Mar 2014 16:43:59 +0000</lastBuildDate>
    
	<atom:link href="http://guidogarcia.net/blog/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lazy loading of modules in nodejs</title>
      <link>http://guidogarcia.net/blog/blog/2014/03/27/lazy-loading-modules-nodejs/</link>
      <pubDate>Thu, 27 Mar 2014 16:43:59 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/03/27/lazy-loading-modules-nodejs/</guid>
      <description>This is a pattern I found in pkgcloud to lazy-load nodejs modules. That is, to defer their loading until a module is actually needed.
var providers = [ &#39;amazon&#39;, &#39;azure&#39;, ..., &#39;joyent&#39; ]; ... // // Setup all providers as lazy-loaded getters // providers.forEach(function (provider) { pkgcloud.providers.__defineGetter__(provider, function () { return require(&#39;./pkgcloud/&#39; + provider); }); });  It basically defines a getter, so modules won&amp;rsquo;t be loaded until you do:</description>
    </item>
    
    <item>
      <title>Performance is premature optimization</title>
      <link>http://guidogarcia.net/blog/blog/2014/01/18/performance-is-premature-optimization/</link>
      <pubDate>Sat, 18 Jan 2014 19:06:03 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/01/18/performance-is-premature-optimization/</guid>
      <description>I will burn in hell, but performance is premature optimization nowadays. Despite it is very interesting from an engineering perspective, from the practical point of view of someone who wants to follow the make-shit-happen startup mantra, my advice is not to worry much about it when it comes to choosing a programming language.
There are things that matter more than the technology stack you choose. In this post I will try to explain why; then you can vent your rage in the comments section.</description>
    </item>
    
    <item>
      <title>Function parameters in Python, Java and Javascript</title>
      <link>http://guidogarcia.net/blog/blog/2014/01/18/function-parameters-python-java-javascript/</link>
      <pubDate>Sat, 18 Jan 2014 11:31:44 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/01/18/function-parameters-python-java-javascript/</guid>
      <description>This is a short post about how these programming languages compare with each other when it comes to declaring functions with optional parameters and default values. Feel free to leave alternatives in other languages in the comments.
Python. The good. Python is my favorite. Use your parameters in any order and define their default values as part of the function signature itself.
def foo(arg1, arg2=&amp;quot;default&amp;quot;): print &amp;quot;arg1:&amp;quot;, arg1, &amp;quot;arg2:&amp;quot;, arg2  The price to pay is that you can not define two methods with the same name in the same class.</description>
    </item>
    
    <item>
      <title>Give your configuration some REST</title>
      <link>http://guidogarcia.net/blog/blog/2014/01/02/a-rest-configuration-server/</link>
      <pubDate>Thu, 02 Jan 2014 14:00:00 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2014/01/02/a-rest-configuration-server/</guid>
      <description>I have built a simple configuration server to expose your app&amp;rsquo;s configuration as a REST service. Its name is rest-confidence (github). In this post I will try to explain its basics and three use cases where it could be useful:
 1. To configure distributed services. 2. As a foundation for A/B testing. 3. As a simple service directory.  Install and run a basic rest-confidence configuration server The first step is installing the configuration server:</description>
    </item>
    
    <item>
      <title>Why is node.js so cool? (from a Java guy)</title>
      <link>http://guidogarcia.net/blog/blog/2013/12/09/why-is-nodejs-so-cool-from-a-java-guy/</link>
      <pubDate>Mon, 09 Dec 2013 14:43:51 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2013/12/09/why-is-nodejs-so-cool-from-a-java-guy/</guid>
      <description>I confess: I am a Java guy At least I used to be. Until I meet node.js. I still think the JVM is one of the greatest pieces of technology ever created by man, and I love the Spring Framework, the hundreds of Apache Java libraries or the over-six-hundred-page books about JEE patterns. It is great for big applications that are created by many developers, or applications that are made to last.</description>
    </item>
    
    <item>
      <title>Node.js running on my Raspberry Pi. A benchmark.</title>
      <link>http://guidogarcia.net/blog/blog/2012/09/13/node-js-on-my-raspberry-pi-a-benchmark/</link>
      <pubDate>Thu, 13 Sep 2012 19:24:58 +0000</pubDate>
      
      <guid>http://guidogarcia.net/blog/blog/2012/09/13/node-js-on-my-raspberry-pi-a-benchmark/</guid>
      <description>Few weeks ago I could not resist the temptation to buy a Raspberry Pi, the super-cheap 35$ computer that comes with 256MB of RAM and a ARM CPU running at 700MHz and fits in your pocket (more information in wikipedia).
See how nice it looks. I am more of a software guy, so the first thing I did was to install node.js (v0.6.19) develop the simplest web server you can create in node (5 lines, it simply returns a 200 HTTP response code without any contents) and put the beast to work.</description>
    </item>
    
  </channel>
</rss>